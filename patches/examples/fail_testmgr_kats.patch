--- testmgr.c	2025-06-12 14:12:46.307216270 +0000
+++ testmgr.c	2025-06-12 14:14:15.598560651 +0000
@@ -44,6 +44,12 @@
 module_param(notests, bool, 0644);
 MODULE_PARM_DESC(notests, "disable crypto self-tests");
 
+//////////////Added for Kernel Testing//////////////
+static bool fips_fail_kats = 0;
+module_param(fips_fail_kats, bool, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);
+MODULE_PARM_DESC(fips_fail_kats, "FIPS testing: force testmgr KAT failures");
+//////////////Added for Kernel Testing//////////////
+
 static bool panic_on_fail;
 module_param(panic_on_fail, bool, 0444);
 
@@ -1313,6 +1319,13 @@
 	if (err)
 		return err;
 result_ready:
+		//////////////Added for Kernel Testing//////////////
+		if (fips_fail_kats) {
+			result[0] ^= 1;
+			printk("FIPS test: altering output for hash %s\n",
+			       tfm->base.__crt_alg->cra_driver_name);
+		}
+		//////////////Added for Kernel Testing//////////////
 	return check_hash_result("shash", result, digestsize, vec, vec_name,
 				 driver, cfg);
 }
@@ -1515,6 +1528,14 @@
 	}
 
 result_ready:
+		//////////////Added for Kernel Testing//////////////
+		if (fips_fail_kats) {
+			result[0] ^= 1;
+			printk("FIPS test: altering output for hash %s\n",
+			       tfm->base.__crt_alg->cra_driver_name);
+		}
+		//////////////Added for Kernel Testing//////////////
+
 	return check_hash_result("ahash", result, digestsize, vec, vec_name,
 				 driver, cfg);
 }
@@ -1933,6 +1954,8 @@
 	const char *driver = crypto_aead_driver_name(tfm);
 	const u32 req_flags = CRYPTO_TFM_REQ_MAY_BACKLOG | cfg->req_flags;
 	const char *op = enc ? "encryption" : "decryption";
+	char *testbuf = NULL;
+	const char *expected_ptr = enc ? vec->ctext : vec->ptext;
 	DECLARE_CRYPTO_WAIT(wait);
 	u8 _iv[3 * (MAX_ALGAPI_ALIGNMASK + 1) + MAX_IVLEN];
 	u8 *iv = PTR_ALIGN(&_iv[0], 2 * (MAX_ALGAPI_ALIGNMASK + 1)) +
@@ -2084,11 +2107,29 @@
 	}
 	if (err) /* Expectedly failed. */
 		return 0;
+	
+	//////////////Added for Kernel Testing//////////////
+	if ((enc ? vec->clen : vec->plen) && fips_fail_kats) {
+		testbuf = kmalloc(enc ? vec->clen : vec->plen, GFP_KERNEL);
+		if (!testbuf)
+			return -ENOMEM;
+		memcpy(testbuf, enc ? vec->ctext : vec->ptext,
+		       enc ? vec->clen : vec->plen);
+		testbuf[0] ^= 1;
+		expected_ptr = testbuf;
+		printk("FIPS test: altering expected data for aead cipher %s\n",
+		       tfm->base.__crt_alg->cra_driver_name);
+	}
+ 	//////////////Added for Kernel Testing//////////////
 
 	/* Check for the correct output (ciphertext or plaintext) */
-	err = verify_correct_output(&tsgls->dst, enc ? vec->ctext : vec->ptext,
+	err = verify_correct_output(&tsgls->dst, expected_ptr,
 				    enc ? vec->clen : vec->plen,
 				    vec->alen, enc || !cfg->inplace);
+
+	if (testbuf)
+		kfree(testbuf);
+	
 	if (err == -EOVERFLOW) {
 		pr_err("alg: aead: %s %s overran dst buffer on test vector %s, cfg=\"%s\"\n",
 		       driver, op, vec_name, cfg->name);
@@ -2637,6 +2678,17 @@
 		data = xbuf[0];
 		memcpy(data, input, template[i].len);
 
+		///////////Addition for Kernel Testing///////////
+		if (fips_fail_kats) {
+			u8 *buf = (u8 *)data;
+
+			if (template[i].len)
+				buf[0] ^= 1;
+			printk("FIPS test: altering input for raw cipher %s\n",
+			       tfm->base.__crt_alg->cra_driver_name);
+		}
+		///////////Addition for Kernel Testing///////////
+
 		crypto_cipher_clear_flags(tfm, ~0);
 		if (template[i].wk)
 			crypto_cipher_set_flags(tfm, CRYPTO_TFM_REQ_FORBID_WEAK_KEYS);
@@ -2698,6 +2750,8 @@
 	const char *driver = crypto_skcipher_driver_name(tfm);
 	const u32 req_flags = CRYPTO_TFM_REQ_MAY_BACKLOG | cfg->req_flags;
 	const char *op = enc ? "encryption" : "decryption";
+	char *testbuf = NULL;
+	const char *expected_ptr = enc ? vec->ctext : vec->ptext;
 	DECLARE_CRYPTO_WAIT(wait);
 	u8 _iv[3 * (MAX_ALGAPI_ALIGNMASK + 1) + MAX_IVLEN];
 	u8 *iv = PTR_ALIGN(&_iv[0], 2 * (MAX_ALGAPI_ALIGNMASK + 1)) +
@@ -2825,9 +2879,24 @@
 		return -EINVAL;
 	}
 
+	//////////////Added for Kernel Testing//////////////
+	if (vec->len && fips_fail_kats) {
+		testbuf = kmalloc(vec->len, GFP_KERNEL);
+		if (!testbuf)
+			return -ENOMEM;
+		memcpy(testbuf, enc ? vec->ctext : vec->ptext, vec->len);
+		testbuf[0] ^= 1;
+		expected_ptr = testbuf;
+		printk("FIPS test: altering expected data for skcipher cipher %s\n",
+		       tfm->base.__crt_alg->cra_driver_name);
+	}
+ 	//////////////Added for Kernel Testing//////////////
+
 	/* Check for the correct output (ciphertext or plaintext) */
-	err = verify_correct_output(&tsgls->dst, enc ? vec->ctext : vec->ptext,
+	err = verify_correct_output(&tsgls->dst, expected_ptr,
 				    vec->len, 0, true);
+	if (testbuf)
+		kfree(testbuf);
 	if (err == -EOVERFLOW) {
 		pr_err("alg: skcipher: %s %s overran dst buffer on test vector %s, cfg=\"%s\"\n",
 		       driver, op, vec_name, cfg->name);
@@ -3697,6 +3766,13 @@
 		goto outbuf;
 	}
 
+	//////////////Added for Kernel Testing//////////////
+	if (fips_fail_kats) {
+		buf[0] ^= 1;
+		printk("FIPS test: altering input for DRBG %s\n", driver);
+	}
+	//////////////Added for Kernel Testing//////////////
+
 	ret = memcmp(test->expected, buf, test->expectedlen);
 
 outbuf:
@@ -3785,6 +3861,17 @@
 			goto free_output;
 		}
 	} else {
+		//////////////Added for Kernel Testing//////////////
+		if (fips_fail_kats) {
+			u8 *buf = (u8 *)output_buf;
+
+			if (out_len_max)
+				buf[0] ^= 1;
+			printk("FIPS test: altering input for KPP %s\n",
+			       tfm->base.__crt_alg->cra_driver_name);
+		}
+		//////////////Added for Kernel Testing//////////////
+
 		/* Verify calculated public key */
 		if (memcmp(vec->expected_a_public, sg_virt(req->dst),
 			   vec->expected_a_public_size)) {
@@ -4006,6 +4093,17 @@
 	akcipher_request_set_callback(req, CRYPTO_TFM_REQ_MAY_BACKLOG,
 				      crypto_req_done, &wait);
 
+	//////////////Added for Kernel Testing//////////////
+		if (fips_fail_kats) {
+			u8 *buf = (u8 *)xbuf[1];
+
+			if (out_len_max)
+				buf[0] ^= 1;
+			printk("FIPS test: altering input for akcipher %s\n",
+			       tfm->base.__crt_alg->cra_driver_name);
+		}
+		//////////////Added for Kernel Testing//////////////
+
 	err = crypto_wait_req(vecs->siggen_sigver_test ?
 			      /* Run asymmetric signature verification */
 			      crypto_akcipher_verify(req) :
@@ -4022,6 +4120,17 @@
 			err = -EINVAL;
 			goto free_all;
 		}
+		//////////////Added for Kernel Testing//////////////
+		if (fips_fail_kats) {
+			u8 *buf = (u8 *)outbuf_enc;
+
+			if (out_len_max)
+				buf[0] ^= 1;
+			printk("FIPS test: altering input for akcipher %s\n",
+			       tfm->base.__crt_alg->cra_driver_name);
+		}
+		//////////////Added for Kernel Testing//////////////
+
 		/* verify that encrypted message is equal to expected */
 		if (memcmp(c, outbuf_enc, c_size) != 0) {
 			pr_err("alg: akcipher: %s test failed. Invalid output\n",
@@ -5684,6 +5793,12 @@
 test_done:
 	if (rc) {
 		if (fips_enabled || panic_on_fail) {
+                        /////////////Added for Kernel Testing//////////////
+                        if (fips_enabled && fips_fail_kats) {  // ‚Üê Add fips_enabled check
+                                printk("FIPS test: prevent self-test kernel panic\n");
+                                return 0;
+                        }
+                        //////////////Added for Kernel Testing//////////////
 			fips_fail_notify();
 			panic("alg: self-tests for %s (%s) failed in %s mode!\n",
 			      driver, alg,
